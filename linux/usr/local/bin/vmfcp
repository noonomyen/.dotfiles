#!/usr/bin/bash

# VMware

CACHE_DIR="$HOME/.cache/vmware/drag_and_drop/"

CLIPBOARD_DATA=$(xsel --clipboard)
RETRY_DELAY=1

wait_animation() {
    local spinner='/-\|'
    while :; do
        for i in {0..3}; do
            echo -ne "\rWaiting for file: $1 ${spinner:$i:1}"
            sleep 0.2
        done
    done
}

wait_for_file() {
    local file_path=$1
    echo "Waiting for file: $file_path"

    wait_animation "$file_path" &
    ANIMATION_PID=$!

    while :; do
        if [ -f "$file_path" ] && [ -r "$file_path" ]; then
            kill $ANIMATION_PID
            wait $ANIMATION_PID 2>/dev/null
            echo -ne "\rFile found: $file_path                        \n"
            return 0
        fi
        sleep $RETRY_DELAY
    done
}

flush_cache() {
    echo "Flushing $CACHE_DIR ..."
    rm -rf "$CACHE_DIR"/*
    echo "Cache flushed."
}

list_cache() {
    echo "Listing files in $CACHE_DIR:"
    ls -lh "$CACHE_DIR"
}

process_files() {
    local mode=$1
    local operation="Copied"

    if [[ "$mode" == "m" ]]; then
        operation="Moved"
    fi

    if [[ "$CLIPBOARD_DATA" =~ file:// ]]; then
        while read -r line; do
            if [[ "$line" =~ file://(.*) ]]; then
                FILE_PATH=${BASH_REMATCH[1]}
                FILE_NAME=$(basename "$FILE_PATH")

                if ! wait_for_file "$FILE_PATH"; then
                    echo "Error: Unable to read file: $FILE_PATH"
                    continue
                fi

                if [ -f "./$FILE_NAME" ]; then
                    echo "File already exists: $FILE_NAME"
                else
                    if [[ "$mode" == "m" ]]; then
                        rsync --remove-source-files --human-readable --progress "$FILE_PATH" .
                    else
                        rsync --human-readable --progress "$FILE_PATH" .
                    fi
                    echo "$operation: $FILE_NAME"
                fi
            fi
        done <<< "$CLIPBOARD_DATA"
    else
        echo "No files detected in clipboard."
    fi
}

list_clipboard_files() {
    if [[ "$CLIPBOARD_DATA" =~ file:// ]]; then
        while read -r line; do
            if [[ "$line" =~ file://(.*) ]]; then
                FILE_PATH=${BASH_REMATCH[1]}
                echo "$FILE_PATH"
            fi
        done <<< "$CLIPBOARD_DATA"
    else
        echo "No valid files detected in clipboard."
    fi
}

case "$1" in
    m)
        process_files "m"
        ;;
    c)
        process_files "c"
        ;;
    f)
        flush_cache
        ;;
    l)
        list_cache
        ;;
    *)
        list_clipboard_files
        ;;
esac
