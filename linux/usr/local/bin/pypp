#!/usr/bin/env python

# Python program passed in as string

globals_= dict(globals())
locals_: dict[str, object] = {}

from sys import argv, exit
from importlib import import_module
from typing import Iterable, Callable, Any
from collections import deque

class _drain:
    @staticmethod
    def __call__(obj: Iterable) -> None:
        deque(obj, maxlen=0)
    __rmatmul__ = __call__

class _lapply:
    @staticmethod
    def __call__(list_: list, func: Callable) -> None:
        list_[:] = map(func, list_)
    __rmatmul__ = __call__

locals_["p"] = print
locals_["drain"] = _drain()
locals_["lapply"] = _lapply()

def run(imports: list[list[str]], code: str):
    for name in imports:
        assert (l := len(name)) in (1, 2), "Import syntax is incorrect"

        from_name, to_name = name if l == 2 else name * 2
        if from_name.endswith("]") and (split_index := from_name.rfind("[")) != -1:
            attr_name = from_name[split_index + 1:-1]
            from_name = from_name[:split_index]
            if l == 1:
                locals_[attr_name] = getattr(import_module(from_name), attr_name)
            else:
                locals_[to_name] = getattr(import_module(from_name), attr_name)
        else:
            locals_[to_name] = import_module(from_name)

    code_compiled = compile(code, "<string>", "exec")
    exec(code_compiled, globals_, locals_)

class features:
    @staticmethod
    def c():
        global globals_, locals_

        class _call_rmatmul:
            def __init__(self, obj: Any) -> None:
                self.obj = obj

            def __rmatmul__(self, other: Any) -> Any:
                return self.obj(other)

        class _call:
            def __getattr__(self, name: str) -> Any:
                if name in locals_:
                    func = locals_[name]
                elif name in globals_:
                    func = globals_[name]
                elif hasattr(__builtins__, name):
                    func = getattr(__builtins__, name)
                else:
                    raise KeyError(f"Not found {name} in locals (exec), globals, __builtins__")
                return _call_rmatmul(func)

        locals_["c"] = _call()

    @staticmethod
    def __call__(name: str):
        try:
            feature_loader = getattr(features, name)
        except AttributeError:
            print(f"Error unknown feature: {name}")
            exit(1)
        feature_loader()

if __name__ == "__main__":
    argv = list(_.strip() for _ in argv)

    if (argc := argv.__len__()) == 2:
        run(imports=[], code=argv[1])
    elif argc == 3:
        run(imports=[_.split("->") for _ in argv[1].split(",")], code=argv[2])
    elif argc == 4:
        deque(map(features.__call__, argv[1].split(",")), maxlen=0)
        run(imports=[_.split("->") for _ in argv[2].split(",")], code=argv[3])
    else:
        print("Python program passed in as string")
        print("  Usage")
        print("    pypp [python code]")
        print("    pypp [module, ...] [python code]")
        print("    pypp [feature, ...] [module, ...] [python code]")
        print("  Feature")
        print("    c -- Call function in locals, globals, __builtins__ with (at) operator (matrix multiplication operator), number@c.str = str(number)")
        print("  Function")
        print("    p      -- print")
        print("    drain  -- drain iterable")
        print("    lapply -- apply return of function back to list")
